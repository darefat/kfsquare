# KFSQUARE Production Docker Compose Configuration
# Supports development and production environments

services:
  # Main Application
  kfsquare-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    image: kfsquare:latest
    container_name: kfsquare-app
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3000
      - MONGODB_URI=mongodb://kfsquare-mongo:27017/kfsquare
      - SESSION_SECRET=${SESSION_SECRET}
      - JWT_SECRET=${JWT_SECRET}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-900000}
      - RATE_LIMIT_MAX=${RATE_LIMIT_MAX:-100}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./backups:/app/backups
      - ./secrets:/app/secrets:ro
    depends_on:
      kfsquare-mongo:
        condition: service_healthy
    networks:
      - kfsquare-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kfsquare.rule=Host(`kfsquare.com`)"
      - "traefik.http.routers.kfsquare.tls=true"
      - "traefik.http.routers.kfsquare.tls.certresolver=letsencrypt"
    env_file:
      - .env.docker

  # MongoDB Database
  kfsquare-mongo:
    image: mongo:6.0
    container_name: kfsquare-mongo
    restart: unless-stopped
    ports:
      - "${MONGO_PORT:-27017}:27017"
    environment:
      - MONGO_INITDB_DATABASE=kfsquare
    volumes:
      - kfsquare-mongo-data:/data/db
      - kfsquare-mongo-config:/data/configdb
      - ./backups:/backups
    networks:
      - kfsquare-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis Cache (for session storage and rate limiting)
  kfsquare-redis:
    image: redis:7-alpine
    container_name: kfsquare-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      - kfsquare-redis-data:/data
      - ./docker/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - kfsquare-network
    command: redis-server /etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

# Volumes for persistent data
volumes:
  kfsquare-mongo-data:
    driver: local
  kfsquare-mongo-config:
    driver: local
  kfsquare-redis-data:
    driver: local

# Network for service communication
networks:
  kfsquare-network:
    driver: bridge
