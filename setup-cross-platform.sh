#!/usr/bin/env bash

# KFSQUARE Cross-Platform Setup Script
# Works on Windows (Git Bash/WSL), macOS, and Linux

set -e  # Exit on error

echo "üöÄ KFSQUARE Cross-Platform Development Environment Setup"
echo "========================================================"

# Global variables
OS=""
ARCH=""
CONTAINER=false
PYTHON_CMD=""
PIP_CMD=""

# Enhanced cross-platform OS detection
detect_os() {
    local unameOut="$(uname -s)"
    case "${unameOut}" in
        Linux*)     
            OS=Linux
            if grep -q Microsoft /proc/version 2>/dev/null; then
                OS="WSL"
            elif [[ -f /system/build.prop ]]; then
                OS="Android"
            fi
            ;;
        Darwin*)    
            OS=Mac
            # Detect Apple Silicon vs Intel
            if [[ $(uname -m) == "arm64" ]]; then
                ARCH="Apple Silicon (M1/M2)"
            else
                ARCH="Intel"
            fi
            ;;
        CYGWIN*)    OS=Cygwin;;
        MINGW*)     OS=MinGw;;
        MSYS*)      OS=Windows;;
        FreeBSD*)   OS=FreeBSD;;
        NetBSD*)    OS=NetBSD;;
        OpenBSD*)   OS=OpenBSD;;
        *)          OS="UNKNOWN:${unameOut}";;
    esac
    echo "üîç Detected OS: $OS ${ARCH:+($ARCH)}"
    
    # Detect if running in container
    if [[ -f /.dockerenv ]] || grep -q 'docker\|lxc' /proc/1/cgroup 2>/dev/null; then
        echo "üê≥ Container environment detected"
        CONTAINER=true
    fi
}

# Enhanced Node.js installation with multiple methods
install_node() {
    if command -v node &> /dev/null; then
        NODE_VERSION=$(node -v)
        echo "‚úÖ Node.js already installed: $NODE_VERSION"
        return
    fi

    echo "üì¶ Installing Node.js..."
    
    case $OS in
        "Mac")
            if command -v brew &> /dev/null; then
                echo "üç∫ Installing via Homebrew..."
                brew install node
            elif command -v port &> /dev/null; then
                echo "üîß Installing via MacPorts..."
                sudo port install nodejs18 +universal
            else
                echo "üì• Installing via Node Version Manager (nvm)..."
                install_nvm_and_node
            fi
            ;;
        "Linux"|"WSL"|"Android")
            # Try multiple package managers in order of preference
            if command -v apt &> /dev/null; then
                # Ubuntu/Debian/WSL
                echo "üì¶ Installing via apt (Ubuntu/Debian)..."
                curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
                sudo apt-get install -y nodejs
            elif command -v yum &> /dev/null; then
                # CentOS/RHEL/Fedora
                echo "üì¶ Installing via yum (CentOS/RHEL)..."
                curl -fsSL https://rpm.nodesource.com/setup_lts.x | sudo bash -
                sudo yum install -y nodejs npm
            elif command -v dnf &> /dev/null; then
                # Modern Fedora
                echo "üì¶ Installing via dnf (Fedora)..."
                sudo dnf install -y nodejs npm
            elif command -v pacman &> /dev/null; then
                # Arch Linux
                echo "üì¶ Installing via pacman (Arch)..."
                sudo pacman -S nodejs npm
            elif command -v zypper &> /dev/null; then
                # openSUSE
                echo "üì¶ Installing via zypper (openSUSE)..."
                sudo zypper install nodejs npm
            elif command -v emerge &> /dev/null; then
                # Gentoo
                echo "üì¶ Installing via emerge (Gentoo)..."
                sudo emerge nodejs
            elif command -v apk &> /dev/null; then
                # Alpine Linux
                echo "üì¶ Installing via apk (Alpine)..."
                sudo apk add nodejs npm
            else
                echo "üì• Installing via Node Version Manager (nvm)..."
                install_nvm_and_node
            fi
            ;;
        "FreeBSD"|"NetBSD"|"OpenBSD")
            if command -v pkg &> /dev/null; then
                echo "üì¶ Installing via pkg (*BSD)..."
                sudo pkg install node npm
            else
                echo "üì• Installing via Node Version Manager (nvm)..."
                install_nvm_and_node
            fi
            ;;
        "Windows"|"MinGw"|"Cygwin")
            if command -v choco &> /dev/null; then
                echo "üç´ Installing via Chocolatey..."
                choco install nodejs
            elif command -v scoop &> /dev/null; then
                echo "ü•Ñ Installing via Scoop..."
                scoop install nodejs
            elif command -v winget &> /dev/null; then
                echo "ü™ü Installing via Windows Package Manager..."
                winget install OpenJS.NodeJS
            else
                echo "‚ö†Ô∏è  Windows detected. Please install Node.js manually:"
                echo "   1. Visit: https://nodejs.org/en/download/"
                echo "   2. Download and install the Windows installer"
                echo "   3. Restart your terminal and run this script again"
                echo "   Or install a package manager:"
                echo "   - Chocolatey: https://chocolatey.org/install"
                echo "   - Scoop: https://scoop.sh/"
                exit 1
            fi
            ;;
        *)
            echo "üì• Installing via Node Version Manager (nvm)..."
            install_nvm_and_node
            ;;
    esac
    
    echo "‚úÖ Node.js installation completed"
}

# Node Version Manager installation (universal fallback)
install_nvm_and_node() {
    echo "üì• Installing Node Version Manager (nvm)..."
    
    # Check if nvm already exists
    if [[ -s "$HOME/.nvm/nvm.sh" ]] || command -v nvm &> /dev/null; then
        echo "‚úÖ nvm already installed"
    else
        # Download and install nvm
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash || {
            echo "‚ùå Failed to install nvm via curl, trying wget..."
            wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash || {
                echo "‚ùå Failed to install nvm. Please install Node.js manually."
                exit 1
            }
        }
        
        # Source nvm
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
    fi
    
    # Install latest LTS Node.js
    echo "üì¶ Installing Node.js LTS via nvm..."
    nvm install --lts
    nvm use --lts
    nvm alias default lts/*
}

# Detect Python command (python3, python, or py)
detect_python() {
    if command -v python3 &> /dev/null; then
        PYTHON_CMD="python3"
        PIP_CMD="pip3"
    elif command -v python &> /dev/null; then
        PYTHON_CMD="python"
        PIP_CMD="pip"
    elif command -v py &> /dev/null; then
        PYTHON_CMD="py"
        PIP_CMD="py -m pip"
    else
        echo "‚ö†Ô∏è  Python not found. Some features may not work."
        return 1
    fi
    
    PYTHON_VERSION=$($PYTHON_CMD --version 2>&1 | cut -d' ' -f2)
    echo "‚úÖ Python detected: $PYTHON_CMD (v$PYTHON_VERSION)"
    return 0
}

# Cross-platform port checking
check_port() {
    local port=$1
    case $OS in
        "Windows"|"MinGw"|"Cygwin")
            netstat -an | grep -q ":$port "
            ;;
        *)
            if command -v lsof &> /dev/null; then
                lsof -i :$port &> /dev/null
            elif command -v netstat &> /dev/null; then
                netstat -an | grep -q ":$port "
            else
                return 1
            fi
            ;;
    esac
}

# Cross-platform process killing
kill_port() {
    local port=$1
    echo "üîÑ Attempting to free port $port..."
    
    case $OS in
        "Windows"|"MinGw"|"Cygwin")
            # Windows command - note: this should be run in cmd, not bash
            echo "‚ö†Ô∏è  For Windows, manually run: netstat -aon | findstr :$port"
            echo "   Then: taskkill /f /pid [PID]"
            ;;
        *)
            if command -v lsof &> /dev/null; then
                lsof -ti :$port | xargs kill -9 2>/dev/null || true
            fi
            ;;
    esac
}

# Enhanced main setup process
main() {
    detect_os
    detect_python
    
    # Install Node.js
    install_node
    
    # Check if npm is available
    if ! command -v npm &> /dev/null; then
        echo "‚ùå npm is not available! Attempting to fix..."
        
        # Try to source nvm if it exists
        if [[ -s "$HOME/.nvm/nvm.sh" ]]; then
            source "$HOME/.nvm/nvm.sh"
            nvm use default 2>/dev/null || nvm use node 2>/dev/null
        fi
        
        if ! command -v npm &> /dev/null; then
            echo "‚ùå npm still not available! Please reinstall Node.js"
            exit 1
        fi
    fi

    NPM_VERSION=$(npm -v)
    NODE_VERSION=$(node -v)
    echo "‚úÖ Node.js: $NODE_VERSION"
    echo "‚úÖ npm: v$NPM_VERSION"

    # Check if we're in the correct directory
    if [ ! -f "package.json" ]; then
        echo "‚ùå package.json not found! Make sure you're in the KFSQUARE project directory"
        echo "üìÅ Current directory: $(pwd)"
        echo "üìã Available files:"
        ls -la | head -10
        exit 1
    fi
    
    echo "üìÅ Project directory confirmed: $(pwd)"

    # Clear npm cache if needed
    echo "üßπ Cleaning npm cache..."
    npm cache clean --force 2>/dev/null || true

    # Install dependencies with retry logic
    echo "üì¶ Installing project dependencies..."
    for i in {1..3}; do
        if npm install; then
            echo "‚úÖ Dependencies installed successfully"
            break
        else
            echo "‚ö†Ô∏è  npm install failed (attempt $i/3), retrying..."
            rm -rf node_modules package-lock.json 2>/dev/null || true
            sleep 2
            if [ $i -eq 3 ]; then
                echo "‚ùå Failed to install npm dependencies after 3 attempts"
                exit 1
            fi
        fi
    done

    # Enhanced Python requirements installation
    if [[ -n "$PYTHON_CMD" ]]; then
        echo "üêç Installing Python requirements..."
        
        # Try to install Python requirements
        if [[ -f "requirements.txt" ]]; then
            $PIP_CMD install -r requirements.txt 2>/dev/null && echo "‚úÖ requirements.txt installed" || echo "‚ö†Ô∏è  requirements.txt installation failed"
        fi
        
        if [[ -f "requirements-minimal.txt" ]]; then
            $PIP_CMD install -r requirements-minimal.txt 2>/dev/null && echo "‚úÖ requirements-minimal.txt installed" || echo "‚ö†Ô∏è  minimal requirements installation failed"
        fi
        
        # Install essential packages for local development
        $PIP_CMD install http.server 2>/dev/null || true
    fi

    # Enhanced dependency verification
    echo "üîç Verifying dependencies..."
    node -e "
    const fs = require('fs');
    const path = require('path');
    
    console.log('üì¶ Checking package.json...');
    const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    console.log('‚úÖ Project:', pkg.name || 'KFSQUARE');
    console.log('‚úÖ Version:', pkg.version || '1.0.0');
    
    const requiredModules = ['express', 'helmet', 'compression', 'express-rate-limit'];
    const optionalModules = ['nodemon'];
    
    let missing = [];
    let optional = [];
    
    requiredModules.forEach(module => {
        try {
            require(module);
            console.log('‚úÖ', module);
        } catch (err) {
            console.log('‚ùå', module, '- Missing!');
            missing.push(module);
        }
    });
    
    optionalModules.forEach(module => {
        try {
            require(module);
            console.log('‚úÖ', module, '(optional)');
        } catch (err) {
            console.log('‚ö†Ô∏è ', module, '- Optional dependency not found');
            optional.push(module);
        }
    });
    
    if (missing.length > 0) {
        console.log('\\n‚ùå Critical dependencies missing:', missing.join(', '));
        console.log('‚ö†Ô∏è  Running npm install again...');
        process.exit(1);
    }
    
    if (optional.length > 0) {
        console.log('\\nüìã Optional dependencies not installed:', optional.join(', '));
        console.log('üí° You can install them with: npm install', optional.join(' '));
    }
    
    console.log('\\nüéâ All critical dependencies verified!');
    " || {
        echo "‚ö†Ô∏è  Dependency verification failed, but continuing..."
    }

    # Enhanced environment file creation
    if [ ! -f ".env" ]; then
        echo "üìã Creating .env file from template..."
        if [ -f ".env.example" ]; then
            cp .env.example .env
            echo "‚úÖ .env file created from .env.example"
        else
            # Create a basic .env file
            cat > .env << 'EOF'
# KFSQUARE Environment Configuration
NODE_ENV=development
PORT=3000

# Mail Provider Configuration (Optional)
MAILGUN_API_KEY=your_mailgun_api_key_here
MAILGUN_DOMAIN=mg.example.com
RECIPIENT_EMAIL=customersupport@kfsquare.com

# Security Configuration
SESSION_SECRET=change_this_in_production

# Database Configuration (if applicable)
# DATABASE_URL=your_database_url_here
EOF
            echo "‚úÖ Basic .env file created"
        fi
        echo "‚ö†Ô∏è  Please edit .env file with your actual configuration values"
    else
        echo "‚úÖ .env file already exists"
    fi

    # Enhanced server testing with multiple fallback options
    echo "üß™ Testing server startup options..."
    
    # Test 1: Node.js server
    if timeout 10 node -e "
    console.log('üß™ Testing Node.js server...');
    try {
        const app = require('./server.js');
        setTimeout(() => {
            console.log('‚úÖ Node.js server test successful');
            process.exit(0);
        }, 2000);
    } catch (err) {
        console.log('‚ùå Node.js server test failed:', err.message);
        process.exit(1);
    }
    " 2>/dev/null; then
        echo "‚úÖ Node.js server ready"
        SERVER_OPTION="nodejs"
    else
        echo "‚ö†Ô∏è  Node.js server test failed"
        SERVER_OPTION="python"
    fi
    
    # Test 2: Python HTTP server
    if [[ -n "$PYTHON_CMD" ]]; then
        echo "üß™ Testing Python HTTP server..."
        if check_port 8080; then
            echo "‚ö†Ô∏è  Port 8080 already in use, trying to free it..."
            kill_port 8080
            sleep 2
        fi
        
        timeout 3 $PYTHON_CMD -m http.server 8080 --bind 127.0.0.1 2>/dev/null &
        SERVER_PID=$!
        sleep 2
        
        if kill -0 $SERVER_PID 2>/dev/null; then
            echo "‚úÖ Python HTTP server ready"
            kill $SERVER_PID 2>/dev/null
            if [[ "$SERVER_OPTION" != "nodejs" ]]; then
                SERVER_OPTION="python"
            fi
        else
            echo "‚ö†Ô∏è  Python HTTP server test failed"
        fi
    fi

    echo ""
    echo "üéâ Cross-Platform Setup Complete!"
    echo "=================================="
    echo ""
    echo "üíª System Information:"
    echo "  ‚Ä¢ Operating System: $OS ${ARCH:+($ARCH)}"
    echo "  ‚Ä¢ Node.js: $(node -v 2>/dev/null || echo 'Not available')"
    echo "  ‚Ä¢ npm: v$(npm -v 2>/dev/null || echo 'Not available')"
    echo "  ‚Ä¢ Python: $(${PYTHON_CMD:-python3} --version 2>/dev/null || echo 'Not available')"
    echo "  ‚Ä¢ Container: ${CONTAINER:-false}"
    echo "  ‚Ä¢ Recommended Server: $SERVER_OPTION"
    echo ""
    echo "üöÄ Quick Start Commands:"
    echo "=================================="
    
    case $SERVER_OPTION in
        "nodejs")
            echo "  üü¢ Primary (Node.js):"
            echo "    npm run dev      # Development server with auto-reload"
            echo "    npm start        # Production server"
            echo ""
            echo "  üîµ Alternative (Python):"
            echo "    npm run serve    # Python HTTP server (port 8080)"
            echo "    $PYTHON_CMD -m http.server 8080"
            ;;
        "python")
            echo "  üîµ Primary (Python):"
            echo "    npm run serve    # Python HTTP server (port 8080)"
            echo "    $PYTHON_CMD -m http.server 8080"
            echo ""
            echo "  ÔøΩ Alternative (Node.js - may need configuration):"
            echo "    npm run dev      # Development server (if Node.js issues are resolved)"
            ;;
        *)
            echo "  üü° Available options:"
            echo "    npm run serve    # Python HTTP server (port 8080)"
            echo "    $PYTHON_CMD -m http.server 8080  # Direct Python server"
            echo "    npm run dev      # Node.js development server"
            ;;
    esac
    
    echo ""
    echo "üåê Access URLs:"
    echo "  ‚Ä¢ Local: http://localhost:3000 (Node.js) or http://localhost:8080 (Python)"
    echo "  ‚Ä¢ Network: http://$(hostname -I 2>/dev/null | awk '{print $1}' || echo 'your-ip'):3000"
    echo ""
    echo "üìã Configuration:"
    echo "  ‚Ä¢ Edit .env file for Mailgun email integration"
    echo "  ‚Ä¢ Customize server.js for advanced Node.js features"
    echo "  ‚Ä¢ All static files served from current directory"
    echo ""
    echo "üõ†Ô∏è  Development Tools:"
    echo "  ‚Ä¢ Hot reload: Supported in development mode"
    echo "  ‚Ä¢ Customer Support Chat: Enhanced with file upload, voice messages"
    echo "  ‚Ä¢ Cross-platform deployment ready"
    echo ""
    echo "üì± Platform-Specific Notes:"
    case $OS in
        "Windows"|"MinGw"|"Cygwin")
            echo "  ü™ü Windows:"
            echo "    ‚Ä¢ Use Git Bash, PowerShell, or WSL for best experience"
            echo "    ‚Ä¢ Windows Terminal recommended"
            echo "    ‚Ä¢ Consider WSL2 for Linux-like environment"
            echo "    ‚Ä¢ Chocolatey or Scoop for package management"
            ;;
        "Mac")
            echo "  üçé macOS:"
            echo "    ‚Ä¢ Homebrew recommended: brew install node"
            echo "    ‚Ä¢ Terminal.app or iTerm2 recommended"
            echo "    ‚Ä¢ Xcode Command Line Tools may be required"
            if [[ "$ARCH" == "Apple Silicon"* ]]; then
                echo "    ‚Ä¢ Apple Silicon detected - native performance"
            else
                echo "    ‚Ä¢ Intel Mac - full compatibility"
            fi
            ;;
        "Linux")
            echo "  üêß Linux:"
            echo "    ‚Ä¢ Package manager: $(command -v apt >&/dev/null && echo 'apt' || command -v yum >&/dev/null && echo 'yum' || command -v pacman >&/dev/null && echo 'pacman' || echo 'detected')"
            echo "    ‚Ä¢ systemd service ready for production deployment"
            echo "    ‚Ä¢ Docker and container deployment supported"
            ;;
        "WSL")
            echo "  ü™üüêß Windows Subsystem for Linux:"
            echo "    ‚Ä¢ Native Linux experience on Windows"
            echo "    ‚Ä¢ Access Windows files via /mnt/c/"
            echo "    ‚Ä¢ VS Code integration available"
            ;;
        "FreeBSD"|"NetBSD"|"OpenBSD")
            echo "  üî± BSD Unix:"
            echo "    ‚Ä¢ pkg package manager recommended"
            echo "    ‚Ä¢ Ports collection available for source builds"
            ;;
        *)
            echo "  ‚ùì Unknown/Other:"
            echo "    ‚Ä¢ Manual configuration may be required"
            echo "    ‚Ä¢ Python HTTP server recommended as fallback"
            ;;
    esac
    
    echo ""
    echo "üîß Troubleshooting:"
    echo "  ‚Ä¢ Port conflicts: Script automatically detects and resolves"
    echo "  ‚Ä¢ Permission issues: Use sudo only when prompted"
    echo "  ‚Ä¢ Network issues: Check firewall settings"
    echo "  ‚Ä¢ Node.js issues: nvm provides version management"
    echo ""
    echo "üìö Additional Resources:"
    echo "  ‚Ä¢ Node.js: https://nodejs.org/en/docs/"
    echo "  ‚Ä¢ npm: https://docs.npmjs.com/"
    echo "  ‚Ä¢ Express.js: https://expressjs.com/en/guide/"
    echo "  ‚Ä¢ Project repository: Check README.md for latest updates"
    echo ""
    
    if [[ "$SERVER_OPTION" == "nodejs" ]]; then
        echo "üéØ Ready to start! Run: npm run dev"
    else
        echo "üéØ Ready to start! Run: npm run serve"
    fi
}

main "$@"
